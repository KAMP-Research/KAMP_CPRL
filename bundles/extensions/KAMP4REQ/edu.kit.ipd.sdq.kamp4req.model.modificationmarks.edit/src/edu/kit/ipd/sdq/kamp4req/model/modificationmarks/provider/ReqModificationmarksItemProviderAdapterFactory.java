/**
 */
package edu.kit.ipd.sdq.kamp4req.model.modificationmarks.provider;

import edu.kit.ipd.sdq.kamp4req.model.modificationmarks.util.ReqModificationmarksAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ReqModificationmarksItemProviderAdapterFactory extends ReqModificationmarksAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReqModificationmarksItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModificationRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqModificationRepositoryItemProvider reqModificationRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModificationRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqModificationRepositoryAdapter() {
		if (reqModificationRepositoryItemProvider == null) {
			reqModificationRepositoryItemProvider = new ReqModificationRepositoryItemProvider(this);
		}

		return reqModificationRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqSeedModifications} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqSeedModificationsItemProvider reqSeedModificationsItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqSeedModifications}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqSeedModificationsAdapter() {
		if (reqSeedModificationsItemProvider == null) {
			reqSeedModificationsItemProvider = new ReqSeedModificationsItemProvider(this);
		}

		return reqSeedModificationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqChangePropagationDueToSpecificationDependencies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqChangePropagationDueToSpecificationDependenciesItemProvider reqChangePropagationDueToSpecificationDependenciesItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqChangePropagationDueToSpecificationDependencies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqChangePropagationDueToSpecificationDependenciesAdapter() {
		if (reqChangePropagationDueToSpecificationDependenciesItemProvider == null) {
			reqChangePropagationDueToSpecificationDependenciesItemProvider = new ReqChangePropagationDueToSpecificationDependenciesItemProvider(this);
		}

		return reqChangePropagationDueToSpecificationDependenciesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqModifyEntityItemProvider reqModifyEntityItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqModifyEntityAdapter() {
		if (reqModifyEntityItemProvider == null) {
			reqModifyEntityItemProvider = new ReqModifyEntityItemProvider(this);
		}

		return reqModifyEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqModifyRequirementItemProvider reqModifyRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqModifyRequirementAdapter() {
		if (reqModifyRequirementItemProvider == null) {
			reqModifyRequirementItemProvider = new ReqModifyRequirementItemProvider(this);
		}

		return reqModifyRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqModifyDecisionItemProvider reqModifyDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqModifyDecisionAdapter() {
		if (reqModifyDecisionItemProvider == null) {
			reqModifyDecisionItemProvider = new ReqModifyDecisionItemProvider(this);
		}

		return reqModifyDecisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqModifyOptionItemProvider reqModifyOptionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.kamp4req.model.modificationmarks.ReqModifyOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqModifyOptionAdapter() {
		if (reqModifyOptionItemProvider == null) {
			reqModifyOptionItemProvider = new ReqModifyOptionItemProvider(this);
		}

		return reqModifyOptionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (reqModificationRepositoryItemProvider != null) reqModificationRepositoryItemProvider.dispose();
		if (reqSeedModificationsItemProvider != null) reqSeedModificationsItemProvider.dispose();
		if (reqChangePropagationDueToSpecificationDependenciesItemProvider != null) reqChangePropagationDueToSpecificationDependenciesItemProvider.dispose();
		if (reqModifyEntityItemProvider != null) reqModifyEntityItemProvider.dispose();
		if (reqModifyRequirementItemProvider != null) reqModifyRequirementItemProvider.dispose();
		if (reqModifyDecisionItemProvider != null) reqModifyDecisionItemProvider.dispose();
		if (reqModifyOptionItemProvider != null) reqModifyOptionItemProvider.dispose();
	}

}
