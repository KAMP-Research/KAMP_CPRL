grammar edu.kit.ipd.sdq.kamp.ruledsl.KampRuleLanguage with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate kampRuleLanguage "http://www.kit.edu/ipd/sdq/kamp/ruledsl/KampRuleLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

RuleFile:
	MirBaseFile
	(javaPackageImports+=JavaImport)*
	(modelImports+=ModelImport)*
	(intancePredicates+=InstancePredicateDeclaration)*
	(instances+=InstanceIdDeclaration)*
	(blocks+=Block)*
;

ModelImport:
	'import-model' file=STRING 'as' name=ValidID
;

InstanceDeclaration:
	InstanceIdDeclaration | InstancePredicateDeclaration
;

ModelInstanceReference:
	model=[ModelImport] '::' instance=[ecore::EObject|QualifiedName] 
;

InstancePredicateDeclaration:
	'find' name=ID ':' type=UnnamedMetaclassReference body=XBlockExpression
;

InstanceIdDeclaration:
	'instance' name=ID ':' instanceReference=ModelInstanceReference
;

Block:
	RecursiveBlock | StandardBlock
;

StandardBlock:
	KampRule
;

RecursiveBlock:
	'recursive' '{' (rules+=KampRule)+ '}'
;

KampRule:
	'rule' name=ValidID ':'
	source=RuleSource
	(instructions+=Instruction)+
	';'
	(modificationMark=ModificationMark)?
;

RuleSource:
	MetaclassRuleSource | InstanceRuleSource | ExternalRuleSource
;

ExternalRuleSource:
	'rule(' rule=[KampRule|ValidID] ')'
;

MetaclassRuleSource:
	'metaclass(' metaclassReference=UnnamedMetaclassReference ')'
;

InstanceRuleSource:
	'instance(' instanceReference=[InstanceDeclaration|ID] ')'
;

ModificationMark:
	'insert' type=[jvmTypes::JvmType|QualifiedName] '#' memberRef=ID 'into' target=[jvmTypes::JvmType|QualifiedName] '#' targetMethod=ID ';'
;

Instruction:
	Lookup | CausingEntityMarker
;

Lookup:
	PropagationReference | RuleReference | Projection
;

Projection returns Projection: 
	TypeProjection | InstanceProjection | InlineInstancePredicateProjection
;

InlineInstancePredicateProjection:
	'[' body=XBlockExpression ']'
;

InstanceProjection:
	'[' instanceDeclarationReference=[InstanceDeclaration|ID] ']'
;

TypeProjection:
	GeneralTypeProjection | SubTypeProjection
;
	
GeneralTypeProjection:
	'<' types+=[jvmTypes::JvmType|QualifiedName] ('AND' types+=[jvmTypes::JvmType|QualifiedName])* '>'
;

SubTypeProjection:
	'<!' types+=[jvmTypes::JvmType|QualifiedName] ('AND' types+=[jvmTypes::JvmType|QualifiedName])* '>'
;

RuleReference:
	'->' 'rule(' rule=[KampRule|ValidID] ')'
;

CausingEntityMarker:
	{CausingEntityMarker} '*'
;

PropagationReference:
	ForwardEReference | BackwardEReference
;

ForwardEReference returns ForwardEReference:
	'->' ForwardReferenceTarget
;

ForwardReferenceTarget:
	MetaclassForwardReferenceTarget | StructuralFeatureForwardReferenceTarget | InstanceForwardReferenceTarget
;

MetaclassForwardReferenceTarget:
	'metaclass(' metaclassReference=UnnamedMetaclassReference ')'
;

StructuralFeatureForwardReferenceTarget:
	'feature(' feature=[ecore::EReference] ')'
;

InstanceForwardReferenceTarget:
	'instance(' instanceReference=[InstanceDeclaration|ID] ')' 
;

BackwardEReference:
	'<-' BackwardReferenceSource
; 

BackwardReferenceSource:
	BackwardReferenceMetaclassSource | BackwardReferenceInstanceSource
;

BackwardReferenceMetaclassSource:
	'metaclass(' mclass=UnnamedMetaclassReference (',' feature=[ecore::EStructuralFeature|ValidID])? ')'
;

BackwardReferenceInstanceSource:
	'instance(' instanceReference=[InstanceDeclaration|ID] ')'
;
 
JavaImport:
	'import-package' javaType=QualifiedName
;